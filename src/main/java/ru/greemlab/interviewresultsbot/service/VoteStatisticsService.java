package ru.greemlab.interviewresultsbot.service;

import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –°–µ—Ä–≤–∏—Å —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º.
 */
@Service
public class VoteStatisticsService {

    /**
     * –í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å: —Ö—Ä–∞–Ω–∏—Ç —Å—É–º–º–∞—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –∏ —Å—á—ë—Ç—á–∏–∫–∏.
     */
    public static class CandidateStats {
        private final AtomicInteger totalResponsibility = new AtomicInteger(0);
        private final AtomicInteger countResponsibility = new AtomicInteger(0);

        private final AtomicInteger totalInterest = new AtomicInteger(0);
        private final AtomicInteger countInterest = new AtomicInteger(0);

        private final AtomicInteger totalResultFocus = new AtomicInteger(0);
        private final AtomicInteger countResultFocus = new AtomicInteger(0);

        private final AtomicInteger yesCount = new AtomicInteger(0);
        private final AtomicInteger noCount = new AtomicInteger(0);

        public void addResponsibility(int score) {
            totalResponsibility.addAndGet(score);
            countResponsibility.incrementAndGet();
        }

        public void addInterest(int score) {
            totalInterest.addAndGet(score);
            countInterest.incrementAndGet();
        }

        public void addResultFocus(int score) {
            totalResultFocus.addAndGet(score);
            countResultFocus.incrementAndGet();
        }

        public void addInviteYes() {
            yesCount.incrementAndGet();
        }

        public void addInviteNo() {
            noCount.incrementAndGet();
        }

        public String getStatsText() {
            return String.format(
                    """
                    
                    üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
                    
                    –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: %s
                    –ò–Ω—Ç–µ—Ä–µ—Å: %s
                    –†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: %s
                    
                    –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ‚úÖ %d | ‚ùå %d
                    """,
                    formatScore(countResponsibility.get(), totalResponsibility.get()),
                    formatScore(countInterest.get(), totalInterest.get()),
                    formatScore(countResultFocus.get(), totalResultFocus.get()),
                    yesCount.get(), noCount.get()
            );
        }

        private String formatScore(int count, int total) {
            if (count == 0) {
                return "–Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫";
            }
            double avg = (double) total / count;
            return String.format("%.2f (–≥–æ–ª–æ—Å–æ–≤: %d)", avg, count);
        }
    }

    private final Map<String, CandidateStats> statsMap = new ConcurrentHashMap<>();

    /**
     * –°–±—Ä–æ—Å –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ /restart).
     */
    public void resetStatistic() {
        statsMap.clear();
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º.
     */
    public String getAllCandidatesStatistics() {
        if (statsMap.isEmpty()) {
            return "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö";
        }
        StringBuilder sb = new StringBuilder("üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n");
        statsMap.forEach((candidateKey, stats) -> {
            sb.append("üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: ")
                    .append(CandidateConstants.getCandidateName(candidateKey))
                    .append("\n")
                    .append(stats.getStatsText())
                    .append("\n\n");
        });
        return sb.toString();
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É.
     */
    public String getCandidateStatistics(String candidateKey) {
        CandidateStats stats = statsMap.get(candidateKey);
        if (stats == null) {
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.";
        }
        return stats.getStatsText();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç) –æ–±—ä–µ–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É.
     */
    private CandidateStats getOrCreate(String candidateKey) {
        return statsMap.computeIfAbsent(candidateKey, k -> new CandidateStats());
    }

    public void addResponsibility(String candidateKey, int score) {
        getOrCreate(candidateKey).addResponsibility(score);
    }

    public void addInterest(String candidateKey, int score) {
        getOrCreate(candidateKey).addInterest(score);
    }

    public void addResultFocus(String candidateKey, int score) {
        getOrCreate(candidateKey).addResultFocus(score);
    }

    public void addInviteYes(String candidateKey) {
        getOrCreate(candidateKey).addInviteYes();
    }

    public void addInviteNo(String candidateKey) {
        getOrCreate(candidateKey).addInviteNo();
    }
}
