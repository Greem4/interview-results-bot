package ru.greemlab.interviewresultsbot.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import ru.greemlab.interviewresultsbot.bot.CandidateEvaluationBot;
import ru.greemlab.interviewresultsbot.util.KeyboardFactory;

import static ru.greemlab.interviewresultsbot.service.UserStateService.UserState;

@Slf4j
@Service
@RequiredArgsConstructor
public class DialogStateMachineService {

    private final UserStateService userStateService;
    private final VoteStatisticsService voteStatisticsService;
    private final ArchiveCandidatesService archiveCandidatesService;

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
     */
    public void processTextMessage(CandidateEvaluationBot bot, Message message) {
        final Long chatId = message.getChatId();
        final String text = message.getText().trim();

        switch (text) {
            case "/start" -> handleStartCommand(bot, chatId);
            case "/restart" -> handleRestartCommand(bot, chatId);
            default -> sendDefaultResponse(bot, chatId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫.
     */
    public void processCallbackQuery(CandidateEvaluationBot bot, CallbackQuery callbackQuery) {
        final Long chatId = callbackQuery.getMessage().getChatId();
        final Integer messageId = callbackQuery.getMessage().getMessageId();
        final String data = callbackQuery.getData();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ê—Ä—Ö–∏–≤" / "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        if (CallbackCommands.ARCHIVE.equals(data)) {
            // –ü—Ä–æ—Å—Ç–æ —à–ª—ë–º –Ω–æ–≤–æ–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—Ä—Ö–∏–≤–æ–º, –ø–æ—Ç–æ–º –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å –µ–≥–æ,
            // –ª–∏–±–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            var archiveMsgId = bot.sendTextMessage(chatId, archiveCandidatesService.getArchiveSummary(), null);
            // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–µ—Ç–µ —É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å
            handleStartCommand(bot, chatId);
            return;
        }
        if (CallbackCommands.CURRENT_STATS.equals(data)) {
            var statsMsgId = bot.sendTextMessage(chatId, voteStatisticsService.getAllCandidatesStatistics(), null);
            // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –º–æ–∂–Ω–æ –ø–æ –∂–µ–ª–∞–Ω–∏—é –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
            return;
        }

        // –£–∑–Ω–∞—ë–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        final UserState currentState = userStateService.getState(chatId);

        switch (currentState) {
            case START -> handleCandidateSelection(bot, chatId, data);
            case WAITING_RESPONSIBILITY ->
                    handleRatingSelection(bot, chatId, data, CallbackCommands.RESP_PREFIX, UserState.WAITING_INTEREST);
            case WAITING_INTEREST ->
                    handleRatingSelection(bot, chatId, data, CallbackCommands.INTR_PREFIX, UserState.WAITING_RESULT_FOCUS);
            case WAITING_RESULT_FOCUS ->
                    handleRatingSelection(bot, chatId, data, CallbackCommands.RESF_PREFIX, UserState.WAITING_INVITE);
            case WAITING_INVITE -> handleInvitationDecision(bot, chatId, data);
            default ->
                    log.warn("–ù–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {} (chatId={})", currentState, chatId);
        }
    }

    /* ====================== /start, /restart –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ====================== */

    private void handleStartCommand(CandidateEvaluationBot bot, Long chatId) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userStateService.resetState(chatId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –û–î–ù–û ¬´–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª (–∫–∞–Ω–¥–∏–¥–∞—Ç—ã + –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏/–∞—Ä—Ö–∏–≤–∞),
        // –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º
        bot.sendTextMessage(
                chatId,
                "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:",
                KeyboardFactory.buildMainMenuKeyboard()
        );
    }

    private void handleRestartCommand(CandidateEvaluationBot bot, Long chatId) {
        // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        userStateService.resetAllSessions();
        voteStatisticsService.resetStatistic();
        bot.sendTextMessage(
                chatId,
                "üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞–±–µ—Ä–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                null
        );
    }

    private void sendDefaultResponse(CandidateEvaluationBot bot, Long chatId) {
        bot.sendTextMessage(
                chatId,
                "‚Ñπ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                null
        );
    }

    /* ====================== –®–∞–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è ====================== */

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ START –Ω–∞–∂–∞–ª –Ω–∞ –∏–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
     */
    private void handleCandidateSelection(CandidateEvaluationBot bot, Long chatId, String candidateKey) {
        if (!CandidateConstants.ALL.contains(candidateKey)) {
            log.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {} (chatId={})", candidateKey, chatId);
            return;
        }
        var session = userStateService.getOrCreateSession(chatId);

        // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (session.hasVotedFor(candidateKey)) {
            // –£–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ ‚Äì –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            var stats = voteStatisticsService.getCandidateStatistics(candidateKey);
            var msgText = "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ " + CandidateConstants.getCandidateName(candidateKey)
                          + "\n\n–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" + stats;
            bot.sendTextMessage(chatId, msgText, null);
            handleStartCommand(bot, chatId);
            return;
        }

        // –ò–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
        session.setCandidateKey(candidateKey);
        session.setState(UserState.WAITING_RESPONSIBILITY);

        // –û—Ç–ø—Ä–∞–≤–∏–º ¬´–≤—Ä–µ–º–µ–Ω–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ (—à–∞–≥ 1)
        // –ó–∞–ø–∏—à–µ–º ID —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å
        var messageId = bot.sendTextMessage(
                chatId,
                "üìù –í—ã –≤—ã–±—Ä–∞–ª–∏: " + CandidateConstants.getCandidateName(candidateKey)
                + "\n‚û° –®–∞–≥ 1/4: –û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å (1-5)",
                KeyboardFactory.buildRatingButtons(CallbackCommands.RESP_PREFIX)
        );

        session.setTempMessageId(messageId); // —Å–æ—Ö—Ä–∞–Ω–∏–º, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ (1..5) –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç—Ä—ë—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ (–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –∏–Ω—Ç–µ—Ä–µ—Å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å).
     */
    private void handleRatingSelection(
            CandidateEvaluationBot bot,
            Long chatId,
            String data,
            String expectedPrefix,
            UserState nextState
    ) {
        if (!data.startsWith(expectedPrefix)) {
            log.warn("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏: {} (chatId={})", data, chatId);
            return;
        }
        var session = userStateService.getOrCreateSession(chatId);
        var messageId = session.getTempMessageId(); // —Ç–æ —Å–∞–º–æ–µ ¬´–≤—Ä–µ–º–µ–Ω–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ
        int score;
        try {
            var scoreStr = data.substring(expectedPrefix.length());
            score = Integer.parseInt(scoreStr);
            if (score < 1 || score > 5) {
                throw new NumberFormatException("Score out of range");
            }
        } catch (NumberFormatException e) {
            log.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {} (chatId={})", data, chatId);
            return;
        }

        var candidateKey = session.getCandidateKey();
        switch (expectedPrefix) {
            case CallbackCommands.RESP_PREFIX -> voteStatisticsService.addResponsibility(candidateKey, score);
            case CallbackCommands.INTR_PREFIX -> voteStatisticsService.addInterest(candidateKey, score);
            case CallbackCommands.RESF_PREFIX -> voteStatisticsService.addResultFocus(candidateKey, score);
            default -> log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏: {}", expectedPrefix);
        }

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        session.setState(nextState);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        String nextText;
        var nextKeyboard = switch (nextState) {
            case WAITING_INTEREST -> {
                nextText = "‚û° –®–∞–≥ 2/4: –û—Ü–µ–Ω–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –¥–µ–ª—É  (1-5)";
                yield KeyboardFactory.buildRatingButtons(CallbackCommands.INTR_PREFIX);
            }
            case WAITING_RESULT_FOCUS -> {
                nextText = "‚û° –®–∞–≥ 3/4: –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (1-5)";
                yield KeyboardFactory.buildRatingButtons(CallbackCommands.RESF_PREFIX);
            }
            case WAITING_INVITE -> {
                nextText = "‚û° –®–∞–≥ 4/4: –ü—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ª–∏ –í—ã –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É?";
                yield KeyboardFactory.buildInviteKeyboard();
            }
            default -> {
                nextText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥";
                yield null;
            }
        };

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ –∂–µ —Å–∞–º–æ–µ ¬´–≤—Ä–µ–º–µ–Ω–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.editMessage(
                chatId,
                messageId,
                "üìù –í—ã –≤—ã–±—Ä–∞–ª–∏: " + CandidateConstants.getCandidateName(candidateKey)
                + "\n" + nextText,
                nextKeyboard
        );
    }

    /**
     * –®–∞–≥ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å / –ù–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å".
     */
    private void handleInvitationDecision(CandidateEvaluationBot bot, Long chatId, String data) {
        if (!data.equals(CallbackCommands.INVITE_YES) && !data.equals(CallbackCommands.INVITE_NO)) {
            log.warn("–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —à–∞–≥–µ INVITE: {} (chatId={})", data, chatId);
            return;
        }

        var session = userStateService.getOrCreateSession(chatId);
        var candidateKey = session.getCandidateKey();
        var tempMsgId = session.getTempMessageId();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å
        if (data.equals(CallbackCommands.INVITE_YES)) {
            voteStatisticsService.addInviteYes(candidateKey);
        } else {
            voteStatisticsService.addInviteNo(candidateKey);
        }
        // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ —ç—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        session.markVoted(candidateKey);

        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        session.setState(UserState.START);
        session.setCandidateKey(null);

        // (–ü–æ –∂–µ–ª–∞–Ω–∏—é) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ ¬´–≤—Ä–µ–º–µ–Ω–Ω–æ–º¬ª —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏—Ç–æ–≥–∏, –∞ –ø–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º
        // –ò–ª–∏ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—å –±–µ–∑ –ø–æ–∫–∞–∑–∞
        var stats = voteStatisticsService.getCandidateStatistics(candidateKey);
        var finalText = "‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                        + "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É " + CandidateConstants.getCandidateName(candidateKey) + ":\n"
                        + stats
                        + "\n\n(–°–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å –∏—Å—á–µ–∑–Ω–µ—Ç)";

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —à–∞–≥–∞ (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
        bot.editMessage(chatId, tempMsgId, finalText, null);

        // –£–¥–∞–ª—è–µ–º ¬´–≤—Ä–µ–º–µ–Ω–Ω–æ–µ¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã ¬´–≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ¬ª –∏—Å—á–µ–∑–ª–æ
        bot.deleteMessage(chatId, tempMsgId);

        // –°—Ç–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ tempMessageId, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—É—Ç–∞–Ω–∏—Ü—ã
        session.setTempMessageId(null);

        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äì –º–æ–∂–µ–º –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å,
        // —Ç–∞–∫ –∫–∞–∫ –≤ —á–∞—Ç–µ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ ¬´–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª —Å –∏–º–µ–Ω–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π/–∞—Ä—Ö–∏–≤–æ–º.
    }
}
