package ru.greemlab.interviewresultsbot.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import ru.greemlab.interviewresultsbot.bot.CandidateEvaluationBot;
import ru.greemlab.interviewresultsbot.util.KeyboardFactory;

import static ru.greemlab.interviewresultsbot.service.UserStateService.UserState;

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ¬´–¥–∏–∞–ª–æ–≥–∞¬ª –∏ ¬´—Å–æ—Å—Ç–æ—è–Ω–∏–π¬ª –≤—ã–Ω–µ—Å–µ–Ω–∞ —Å—é–¥–∞:
 * 1. processTextMessage() ‚Äì —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * 2. processCallbackQuery() ‚Äì —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ inline-–∫–Ω–æ–ø–æ–∫.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class DialogStateMachineService {

    private final UserStateService userStateService;
    private final VoteStatisticsService voteStatisticsService;
    private final ArchiveCandidatesService archiveCandidatesService;

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥—ã –∏ —Ç.–¥.)
     */
    public void processTextMessage(CandidateEvaluationBot bot, Message message) {
        final Long chatId = message.getChatId();
        final String text = message.getText().trim();

        switch (text) {
            case "/start" -> handleStartCommand(bot, chatId);
            case "/restart" -> handleRestartCommand(bot, chatId);
            default -> sendDefaultResponse(bot, chatId);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
     */
    public void processCallbackQuery(CandidateEvaluationBot bot, CallbackQuery callbackQuery) {
        final Long chatId = callbackQuery.getMessage().getChatId();
        final Integer messageId = callbackQuery.getMessage().getMessageId();
        final String data = callbackQuery.getData();

        // ¬´–°–ª—É–∂–µ–±–Ω—ã–µ¬ª –∫–Ω–æ–ø–∫–∏ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∞—Ä—Ö–∏–≤)
        if (CallbackCommands.ARCHIVE.equals(data)) {
            bot.editMessage(chatId, messageId, archiveCandidatesService.getArchiveSummary(), null);
            return;
        }
        if (CallbackCommands.CURRENT_STATS.equals(data)) {
            bot.editMessage(chatId, messageId, voteStatisticsService.getAllCandidatesStatistics(), null);
            return;
        }

        // –õ–æ–≥–∏–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        final UserState currentState = userStateService.getState(chatId);
        switch (currentState) {
            case START -> handleCandidateSelection(bot, chatId, messageId, data);
            case WAITING_RESPONSIBILITY -> handleRatingSelection(bot, chatId, messageId, data,
                    CallbackCommands.RESP_PREFIX, UserState.WAITING_INTEREST);
            case WAITING_INTEREST -> handleRatingSelection(bot, chatId, messageId, data,
                    CallbackCommands.INTR_PREFIX, UserState.WAITING_RESULT_FOCUS);
            case WAITING_RESULT_FOCUS -> handleRatingSelection(bot, chatId, messageId, data,
                    CallbackCommands.RESF_PREFIX, UserState.WAITING_INVITE);
            case WAITING_INVITE -> handleInvitationDecision(bot, chatId, messageId, data);
            default ->
                    log.warn("–ù–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {} (chatId={})", currentState, chatId);
        }
    }

    /** ====================== –ú–µ—Ç–æ–¥—ã –¥–ª—è /start, /restart ======================== */

    private void handleStartCommand(CandidateEvaluationBot bot, Long chatId) {
        userStateService.resetState(chatId);
        bot.sendTextMessage(
                chatId,
                "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                KeyboardFactory.buildMainMenuKeyboard()
        );
    }

    private void handleRestartCommand(CandidateEvaluationBot bot, Long chatId) {
        userStateService.resetAllSessions();
        voteStatisticsService.resetStatistic();
        bot.sendTextMessage(
                chatId,
                "üîÑ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.",
                null
        );
    }

    private void sendDefaultResponse(CandidateEvaluationBot bot, Long chatId) {
        bot.sendTextMessage(
                chatId,
                "‚Ñπ –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                null
        );
    }

    /* ====================== –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –æ—Ü–µ–Ω–æ–∫ ======================== */

    private void handleCandidateSelection(CandidateEvaluationBot bot, Long chatId,
                                          Integer messageId, String data) {
        if (!CandidateConstants.ALL.contains(data)) {
            log.warn("–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç: {} (chatId={})", data, chatId);
            return;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ state
        userStateService.setCandidate(chatId, data);
        userStateService.setState(chatId, UserState.WAITING_RESPONSIBILITY);

        bot.editMessage(
                chatId,
                messageId,
                "üìù –í—ã –≤—ã–±—Ä–∞–ª–∏: " + CandidateConstants.getCandidateName(data)
                + "\n\n‚û° –®–∞–≥ 1/4: –û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å (1-5):",
                KeyboardFactory.buildRatingButtons(CallbackCommands.RESP_PREFIX)
        );
    }

    private void handleRatingSelection(
            CandidateEvaluationBot bot,
            Long chatId,
            Integer messageId,
            String data,
            String expectedPrefix,
            UserState nextState
    ) {
        if (!data.startsWith(expectedPrefix)) {
            log.warn("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏: {} (chatId={})", data, chatId);
            return;
        }
        final String scoreStr = data.substring(expectedPrefix.length());
        int score;
        try {
            score = Integer.parseInt(scoreStr);
            if (score < 1 || score > 5) {
                throw new NumberFormatException("Score out of range 1..5");
            }
        } catch (NumberFormatException e) {
            log.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {} (chatId={}), {}", scoreStr, chatId, e.getMessage());
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        final String candidateKey = userStateService.getCandidate(chatId);
        switch (expectedPrefix) {
            case CallbackCommands.RESP_PREFIX -> voteStatisticsService.addResponsibility(candidateKey, score);
            case CallbackCommands.INTR_PREFIX -> voteStatisticsService.addInterest(candidateKey, score);
            case CallbackCommands.RESF_PREFIX -> voteStatisticsService.addResultFocus(candidateKey, score);
            default -> log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏: {}", expectedPrefix);
        }

        // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        userStateService.setState(chatId, nextState);

        final String nextText;
        final var nextKeyboard = switch (nextState) {
            case WAITING_INTEREST -> {
                nextText = "‚û° –®–∞–≥ 2/4: –û—Ü–µ–Ω–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –¥–µ–ª—É (1-5):";
                yield KeyboardFactory.buildRatingButtons(CallbackCommands.INTR_PREFIX);
            }
            case WAITING_RESULT_FOCUS -> {
                nextText = "‚û° –®–∞–≥ 3/4: –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (1-5):";
                yield KeyboardFactory.buildRatingButtons(CallbackCommands.RESF_PREFIX);
            }
            case WAITING_INVITE -> {
                nextText = "‚û° –®–∞–≥ 4/4: –ü—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ª–∏ –≤—ã –¥–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞?";
                yield KeyboardFactory.buildInviteKeyboard();
            }
            default -> {
                nextText = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥...";
                yield null;
            }
        };

        bot.editMessage(chatId, messageId, nextText, nextKeyboard);
    }

    private void handleInvitationDecision(CandidateEvaluationBot bot, Long chatId,
                                          Integer messageId, String data) {
        if (!data.equals(CallbackCommands.INVITE_YES) && !data.equals(CallbackCommands.INVITE_NO)) {
            log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ —à–∞–≥–µ INVITE: {} (chatId={})", data, chatId);
            return;
        }

        final String candidateKey = userStateService.getCandidate(chatId);
        if (data.equals(CallbackCommands.INVITE_YES)) {
            voteStatisticsService.addInviteYes(candidateKey);
        } else {
            voteStatisticsService.addInviteNo(candidateKey);
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        final String stats = voteStatisticsService.getCandidateStatistics(candidateKey);
        final String msg = String.format(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É %s:\n%s",
                CandidateConstants.getCandidateName(candidateKey),
                stats
        );

        bot.editMessage(chatId, messageId, msg, null);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ START
        userStateService.setState(chatId, UserState.START);
        userStateService.setCandidate(chatId, null);

        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        bot.sendTextMessage(chatId, "üîÑ –î–ª—è –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start",
                KeyboardFactory.buildMainMenuKeyboard());
    }
}
