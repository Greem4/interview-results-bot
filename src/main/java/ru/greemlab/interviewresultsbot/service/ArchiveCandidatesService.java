package ru.greemlab.interviewresultsbot.service;

import jakarta.annotation.PostConstruct;
import org.springframework.stereotype.Service;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
 * –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –ë–î.
 */
@Service
public class ArchiveCandidatesService {

    private final Map<String, VoteStatisticsService.CandidateStats> archive = new ConcurrentHashMap<>();

    /**
     * –ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –≤ –∞—Ä—Ö–∏–≤–µ.
     */
    @PostConstruct
    public void init() {
        addSampleCandidate("–ü–µ—Ç—Ä–æ–≤ –ü.–ü.", new int[]{4, 5}, new int[]{4, 3}, new int[]{5, 5}, 2, 0);
        addSampleCandidate("–°–∏–¥–æ—Ä–æ–≤–∞ –ö.–ö.", new int[]{3}, new int[]{3, 3, 4}, new int[]{2, 3}, 0, 1);
        addSampleCandidate("–ò–≤–∞–Ω–æ–≤ –°.–°.", new int[]{5, 5}, new int[]{5}, new int[]{4, 4, 4}, 3, 0);
        addSampleCandidate("–ö–æ–≤–∞–ª—ë–≤–∞ –õ.–õ.", new int[]{3, 4}, new int[]{4, 5}, new int[]{5}, 1, 1);
        addSampleCandidate("–°–∞–º–æ–π–ª–æ–≤ –†.–†.", new int[]{5, 5, 5}, new int[]{5, 5}, new int[]{5}, 2, 0);
    }

    public String getArchiveSummary() {
        if (archive.isEmpty()) {
            return "üì≠ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç";
        }
        StringBuilder sb = new StringBuilder("üìÅ –ê—Ä—Ö–∏–≤ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:\n\n");
        archive.forEach((name, stats) -> {
            sb.append("üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: ").append(name).append("\n")
                    .append(stats.getStatsText()).append("\n\n");
        });
        return sb.toString();
    }

    private void addSampleCandidate(String name,
                                    int[] responsibilityScores,
                                    int[] interestScores,
                                    int[] focusScores,
                                    int yesCount,
                                    int noCount) {
        var stats = new VoteStatisticsService.CandidateStats();
        for (int r : responsibilityScores) stats.addResponsibility(r);
        for (int i : interestScores) stats.addInterest(i);
        for (int f : focusScores) stats.addResultFocus(f);
        for (int i = 0; i < yesCount; i++) stats.addInviteYes();
        for (int i = 0; i < noCount; i++) stats.addInviteNo();
        archive.put(name, stats);
    }
}
