package ru.greemlab.interviewresultsbot.service;

import jakarta.annotation.PostConstruct;
import org.springframework.stereotype.Service;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
 */
@Service
public class ArchiveCandidatesService {

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    private final Map<String, VoteStatisticsService.CandidateStats> archive = new ConcurrentHashMap<>();

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    @PostConstruct
    public void init() {
        addSampleCandidate(
                "–ü–µ—Ç—Ä–æ–≤ –ü.–ü.",
                new int[]{4,5}, // –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
                new int[]{4,3},  // –ò–Ω—Ç–µ—Ä–µ—Å
                new int[]{5,5},  // –†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
                2, 0             // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        );
        addSampleCandidate(
                "–°–∏–¥–æ—Ä–æ–≤–∞ –ö.–ö.",
                new int[]{3},
                new int[]{3,3,4},
                new int[]{2,3},
                0, 1
        );
        addSampleCandidate(
                "–ò–≤–∞–Ω–æ–≤ –°.–°.",
                new int[]{5,5},
                new int[]{5},
                new int[]{4,4,4},
                3, 0
        );
        addSampleCandidate(
                "–ö–æ–≤–∞–ª—ë–≤–∞ –õ.–õ.",
                new int[]{3,4},
                new int[]{4,5},
                new int[]{5},
                1, 1
        );
        addSampleCandidate(
                "–°–∞–º–æ–π–ª–æ–≤ –†.–†.",
                new int[]{5,5,5},
                new int[]{5,5},
                new int[]{5},
                2, 0
        );
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –∞—Ä—Ö–∏–≤
     */
    private void addSampleCandidate(String name, int[] responsibility,
                                    int[] interest, int[] resultFocus,
                                    int yesCount, int noCount) {
        VoteStatisticsService.CandidateStats stats = new VoteStatisticsService.CandidateStats();

        for (int r : responsibility) stats.addResponsibility(r);
        for (int i : interest) stats.addInterest(i);
        for (int f : resultFocus) stats.addResultFocus(f);

        for (int i = 0; i < yesCount; i++) stats.addInviteYes();
        for (int i = 0; i < noCount; i++) stats.addInviteNo();

        archive.put(name, stats);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –∞—Ä—Ö–∏–≤—É
     */
    public String getArchiveSummary() {
        if (archive.isEmpty()) return "üì≠ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç";

        StringBuilder sb = new StringBuilder("üìÅ –ê—Ä—Ö–∏–≤ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:\n\n");
        archive.forEach((name, stats) ->
                sb.append(formatCandidateEntry(name, stats))
        );
        return sb.toString();
    }

    private String formatCandidateEntry(String name, VoteStatisticsService.CandidateStats stats) {
        return String.format(
                "‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ\n" +
                "üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: %s\n%s\n\n",
                name,
                stats.getStatsText()
        );
    }
}